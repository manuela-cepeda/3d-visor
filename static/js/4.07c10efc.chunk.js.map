{"version":3,"sources":["components/views/proyectpage/workspace/LeftPanel/ViewerElementDropdown.js","components/views/proyectpage/workspace/LeftPanel/ViewerLevelDropdown.js","components/views/proyectpage/workspace/LeftPanel/TreeViewNode.js","components/views/proyectpage/workspace/LeftPanel/TreeView.js"],"names":["ViewerElementDropdown","elementID","useContext","ViewerContext","isolate","selectFromList","addToTable","CommentOnElement","React","useState","dropdownPopoverShow","setDropdownPopoverShow","btnDropdownRef","createRef","popoverDropdownRef","handleAddToList","e","a","preventDefault","className","href","ref","onClick","createPopper","current","placement","ViewerLevelDropdown","childsID","isolateChilds","selectAllChilds","unselectAll","TreeViewNode","hasChild","node","selectedID","hide","childVisible","setChildVisiblity","hideElement","setHideElement","isShown","setIsShown","isSelected","expressID","nodeRef","useRef","undefined","children","length","scrollIntoView","block","behavior","map","onMouseEnter","onMouseLeave","property","find","i","filtroTree","type","id","v","ObjectType","value","Name","indexOf","data","memo","TreeView","tree"],"mappings":"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","file":"static/js/4.07c10efc.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { createPopper } from \"@popperjs/core\";\nimport { ViewerContext } from \"context/ViewerContext\";\n\nconst ViewerElementDropdown = ({elementID }) => {\n\n  const { isolate, selectFromList, addToTable, CommentOnElement}=useContext(ViewerContext);\n\n  // dropdown props\n  const [dropdownPopoverShow, setDropdownPopoverShow] = React.useState(false);\n  const btnDropdownRef = React.createRef();\n  const popoverDropdownRef = React.createRef();\n  const openDropdownPopover = () => {\n    createPopper(btnDropdownRef.current, popoverDropdownRef.current, {\n      placement: \"left-start\",\n    });\n    setDropdownPopoverShow(true);\n  };\n  const closeDropdownPopover = () => {\n    setDropdownPopoverShow(false);\n  };\n\n  //handle opcions\n  const handleIsolate = (e) => { \n    e.preventDefault() \n\t\tisolate(elementID);     \n\t}\n\n\tconst handleComment = (e) => {  \n    e.preventDefault()  \n    CommentOnElement()\n\t}\n    \n\tconst handleAddToList =  async (e) => {  \n    e.preventDefault() \t\t \n\t\taddToTable()\t\n\t }\n  \n\n\n  return (\n    <>\n      <a\n        className=\"text-blueGray-500  hover:text-orange-500  focus:text-orange-500   px-3\"\n        href=\"#pablo\"\n        ref={btnDropdownRef}\n        onClick={(e) => {\n          e.preventDefault();\n          dropdownPopoverShow ? closeDropdownPopover() : openDropdownPopover();\n          selectFromList(e)\n        }}\n      >\n        <i className=\"fas fa-ellipsis-v\"></i>\n      </a>\n      <div\n        ref={popoverDropdownRef}\n        className={\n          (dropdownPopoverShow ? \"block \" : \"hidden \") +\n          \"bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48\"\n        }\n      >\n        <a\n          href=\"#viewer\"\n          className={\n            \"hover:bg-gray-200 text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700\"\n          }\n          onClick={handleAddToList}\n        >\n          Add to List \n        </a>\n        <a\n          href=\"#viewer\"\n          className={\n            \"hover:bg-gray-200  text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700\"\n          }\n          onClick={handleComment}\n        >\n      Add comment\n        </a>\n        <a\n          href=\"#viewer\"\n          className={\n            \"hover:bg-gray-200  text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700\"\n          }\n          onClick={handleIsolate}\n        >\n       Isolate element\n        </a>\n      \n      </div>\n    </>\n  );\n};\n\nexport default ViewerElementDropdown;\n","import React, { useContext } from \"react\";\nimport { createPopper } from \"@popperjs/core\";\nimport { ViewerContext } from \"context/ViewerContext\";\n\nconst ViewerLevelDropdown = ({childsID}) => {\n\n  const { isolateChilds, selectAllChilds ,unselectAll}=useContext(ViewerContext);\n \n  // dropdown props\n  const [dropdownPopoverShow, setDropdownPopoverShow] = React.useState(false);\n  const btnDropdownRef = React.createRef();\n  const popoverDropdownRef = React.createRef();\n  const openDropdownPopover = () => {\n    createPopper(btnDropdownRef.current, popoverDropdownRef.current, {\n      placement: \"left-start\",\n    });\n    setDropdownPopoverShow(true);\n  };\n  const closeDropdownPopover = () => {\n    setDropdownPopoverShow(false);\n  };\n\n  //handle opcions\n  const handleIsolate = (e) => { \n    e.preventDefault() \n\t\tisolateChilds(childsID);     \n    unselectAll()\n\t}\n\n    \n\tconst handleAddToList =  async (e) => {  \n    e.preventDefault()    \n\t\t// addCategoryToTable(childIDs)\t\n\t }\n   \n\n\n\n  return (\n    <>\n      <a\n        className=\"text-blueGray-500  hover:text-orange-500  focus:text-orange-500   px-3\"\n        href=\"#\"\n        ref={btnDropdownRef}\n        onClick={(e) => {\n          e.preventDefault();\n          dropdownPopoverShow ? closeDropdownPopover() : openDropdownPopover();   \n                 \n          selectAllChilds(childsID)\n        }}\n      >\n        <i className=\"fas fa-ellipsis-v\"></i>\n      </a>\n      <div\n        ref={popoverDropdownRef}\n        className={\n          (dropdownPopoverShow ? \"block \" : \"hidden \") +\n          \"bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48\"\n        }\n      >\n        <a\n          href=\"\"\n          className={\n            \"hover:bg-gray-200 text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700\"\n          }\n          onClick={handleAddToList}\n        >\n          Add to List \n        </a>      \n        <a\n          href=\"\"\n          className={\n            \"hover:bg-gray-200  text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700\"\n          }\n          onClick={handleIsolate}\n        >\n       Isolate category\n        </a>\n      \n      </div>\n    </>\n  );\n};\n\nexport default ViewerLevelDropdown;\n","\r\nimport ViewerElementDropdown from './ViewerElementDropdown';\r\nimport ViewerLevelDropdown from './ViewerLevelDropdown';\r\nimport { ViewerContext } from 'context/ViewerContext';\r\nimport React, { memo, useContext, useRef, useState } from 'react'\r\nimport TreeView from './TreeView';\r\n\r\n\r\n const TreeViewNode =   ({ node }) => { \r\n    \r\n    const {selectedID , hide}= useContext(ViewerContext); \r\n      \r\n    const [childVisible, setChildVisiblity] = useState(true); \r\n    const [hideElement, setHideElement] = useState('fas fa-lightbulb');   \r\n    const [isShown, setIsShown] = useState(false);\r\n\r\n    const isSelected =  node.expressID == selectedID ?  true : false; \r\n\r\n    const nodeRef =  useRef()  \r\n    let hasChild\r\n    if(node.children != undefined) {\r\n     hasChild = node.children.length ? true : false;\r\n      \r\n    }  \r\n   if(isSelected == 1  && nodeRef.current){\r\n  \r\n    nodeRef.current.scrollIntoView({ block: \"center\", behavior: 'smooth' })\r\n   }\r\n    \r\n   const handleHide = () => {\r\n     if(hideElement.indexOf('fas')  !== -1){\r\n      hide(node.expressID, 'hide') ;\r\n      setHideElement(\"far fa-lightbulb\")\r\n     }\r\n     if(hideElement.indexOf('far')  !== -1){\r\n      hide(node.expressID, 'show') ;\r\n      setHideElement(\"fas fa-lightbulb\")\r\n     }\r\n  }  \r\n\r\n  const childsID = hasChild && node.children.map(children => children.expressID)\r\n \r\n\r\n  /// Filtro de propiedades\r\nconst filtroTree = (property) => {\r\n  const hideTree = ['IFCSITE',  'IFCBUILDING','IFCPROJECT'];\r\n  const found = hideTree.find(i => i === property);\r\n  if (!found) {\r\n    return true;\r\n  }\r\n}\r\n   \r\n    return (\r\n      <>\r\n      <li  \r\n      onMouseEnter={() => setIsShown(true)}\r\n      onMouseLeave={() => setIsShown(false)}\r\n       ref={nodeRef} className={`cursor-pointer  ${ isSelected  ? \"bg-orange-100\" : \"\"  }`}>\r\n       \r\n        { filtroTree(node.type) &&  ( <div className=\"p-1 text-xs\" >\r\n          <div  id={node.expressID} className={`flex justify-between  select-none ${ hasChild ? \"font-semibold\" : \"\"  } `}  >      \r\n           <div onClick={() => setChildVisiblity((v) => !v)} > \r\n              {hasChild && (\r\n                <>\r\n                  <i className={`pr-1 fas  ${childVisible ? \"fa-angle-down\" : \"fa-angle-right\"}`}  ></i>\r\n                  <i className={`pr-1 fas  ${childVisible ? \"fa-folder-open\" : \"fa-folder\"}`}> </i>\r\n                </>\r\n              ) }               \r\n             {  node.ObjectType?.value || node.Name?.value || node.type } {hasChild && <>({childsID.length}) </>  }\r\n             </div>              \r\n             <div className='flex'>\r\n              {hasChild &&\r\n               <>{isShown && <ViewerLevelDropdown childsID={childsID} />} </> }   \r\n\r\n              { hasChild == false &&   (\r\n                <>\r\n               {isShown && <ViewerElementDropdown elementID={node.expressID} /> }\r\n                <i \r\n                onClick={handleHide}               \r\n               className ={` hover:text-orange-500  ${hideElement} pr-2 `} ></i>\r\n                </>\r\n              )}\r\n            </div> \r\n                \r\n          \r\n            \r\n           </div>   \r\n       \r\n        </div>\r\n        )}\r\n              \r\n        {hasChild && childVisible && (\r\n          <div className=\"d-tree-content\">\r\n            <ul className=\"d-flex d-tree-container flex-column pl-1 \">\r\n              <TreeView data={node.children}  />\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </li>\r\n      </>\r\n    );\r\n  };\r\n\r\n\r\nexport default memo(TreeViewNode);","\r\nimport  TreeViewNode  from './TreeViewNode'\r\n\r\n const TreeView = ({data = [] }) => {  \r\n    \r\n  return (\r\n      <>    \r\n        \r\n         <div className=\"mb-1\">\r\n            <ul className=\"text-sm text-blueGray-700\">\r\n            { data?.map((tree) =>\r\n            (                 \r\n                 <TreeViewNode key={tree.expressID} node={tree}/> \r\n            )\r\n            )}\r\n            </ul>\r\n        </div>\r\n      \r\n         \r\n      </>\r\n  )\r\n}\r\n\r\n\r\nexport default TreeView;\r\n\r\n\r\n\r\n  "],"sourceRoot":""}